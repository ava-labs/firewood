syntax = "proto3";

package merkle;

import "google/protobuf/empty.proto";

// Methods on this service return status code NOT_FOUND if a requested
// view, iterator or root hash is not found.
service Merkle {
  rpc NewProposal(NewProposalRequest) returns (NewProposalResponse);
  rpc ProposalCommit(ProposalCommitRequest) returns (google.protobuf.Empty);
  
  rpc NewView(NewViewRequest) returns (NewViewResponse);
  // The methods below may be called with an ID that corresponds to either a (committable) proposal
  // or (non-committable) historical view.
  rpc ViewHas(ViewHasRequest) returns (ViewHasResponse);
  rpc ViewGet(ViewGetRequest) returns (ViewGetResponse);
  rpc ViewNewIteratorWithStartAndPrefix(ViewNewIteratorWithStartAndPrefixRequest) returns (ViewNewIteratorWithStartAndPrefixResponse);
  // Returns status code NOT_FOUND when the iterator is done.
  rpc IteratorNext(IteratorNextRequest) returns (IteratorNextResponse);
  rpc IteratorError(IteratorErrorRequest) returns (google.protobuf.Empty);
  // Iterator can't be used (even to check error) after release.
  rpc IteratorRelease(IteratorReleaseRequest) returns (google.protobuf.Empty);
  rpc ViewRelease(ViewReleaseRequest) returns (google.protobuf.Empty);
}

message NewProposalRequest {
  // If not given, the parent view is the current database revision.
  optional uint32 parent_id = 1;
  repeated PutRequest puts = 2;
  // The keys being deleted.
  repeated bytes deletes = 3;
}

message NewProposalResponse {
  uint32 id = 1;
}

message ProposalCommitRequest {
  uint32 id = 1;
}

message NewViewRequest {
  bytes root_hash = 1;
}

message NewViewResponse {
  uint32 id = 1;
}

message ViewHasRequest {
  uint32 id = 1;
  bytes key = 2;
}

message ViewHasResponse {
  bool has = 1;
}

message ViewGetRequest {
  uint32 id = 1;
  bytes key = 2;
}

message ViewGetResponse {
  bytes value = 1;
}

message ViewNewIteratorWithStartAndPrefixRequest {
  uint32 id = 1;
  bytes start = 2;
  bytes prefix = 3;
}

message ViewNewIteratorWithStartAndPrefixResponse {
  uint32 id = 1;
}

message IteratorNextRequest {
  uint32 id = 1;
}

message IteratorNextResponse {
  PutRequest data = 1;
}

message IteratorErrorRequest {
  uint32 id = 1;
}

message IteratorReleaseRequest {
  uint32 id = 1;
}

message ViewReleaseRequest {
  uint32 id = 1;
}

// TODO import this from the rpcdb package.
message PutRequest {
  bytes key = 1;
  bytes value = 2;
}
