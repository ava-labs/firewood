name: ci

on:
  pull_request:
    branches: ['*']
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cargo-cache.outputs.cache-primary-key }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
      - name: Check
        run: cargo check --workspace --tests --examples --benches
      - name: Build
        run: cargo build --workspace --tests --examples --benches

  lint:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "false"
      - name: Check license headers
        uses: viperproject/check-license-header@v2
        with:
          path: .
          config: .github/check-license-headers.yaml
          strict: true
      - name: Format
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy --tests --examples --benches -- -D warnings

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "false"
      - name: Run tests with features enabled
        run: cargo test --verbose --features logger,ethhash
      - name: Run tests with ethhash disabled
        run: cargo test --verbose
      # TODO: Enable testing with branch_factor_256
      # - name: Run tests with branch_factor_256
      #   run: cargo test --verbose --features branch_factor_256

  examples:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "false"
  # benchmarks were not being done in --release mode, we can enable this again later
  #     - name: Run benchmark example
  #       run: RUST_BACKTRACE=1 cargo run --example benchmark -- --nbatch 100 --batch-size 1000
  #   - name: Run insert example
  #     run: RUST_BACKTRACE=1 cargo run --example insert

  docs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "false"
      - run: RUSTDOCFLAGS="-D warnings" cargo doc --document-private-items --no-deps

  ffi:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "false"
      - name: Build Firewood FFI
        working-directory: ffi
        run: cargo build --release
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "ffi/go.mod"
          cache-dependency-path: "ffi/go.sum"
      - name: Test Go FFI bindings
        working-directory: ffi
        # cgocheck2 is expensive but provides complete pointer checks
        run: GOEXPERIMENT=cgocheck2 go test ./...
      
  ethhash:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "false"
      - name: Build Firewood FFI (with ethhash)
        run: cargo build --release --features ethhash
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "ffi/tests/go.mod"
          cache-dependency-path: "ffi/tests/go.sum"
      - name: Test Ethereum hash compatability
        working-directory: ffi/tests
        run: go test ./...
