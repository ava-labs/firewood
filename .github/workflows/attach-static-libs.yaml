name: attach-static-libs

on:
  workflow_dispatch:
    inputs:
      create_branch_name:
        description: "Name of the new branch to create and attach static libs"
        required: true
  push:
    tags:
      - "*"
  pull_request:

env:
  CARGO_TERM_COLOR: always

# Build, upload, and collect static libraries for each target architecture,
# so that golang projects can import the FFI package without needing to
# recompile Firewood locally.
# Supported architectures are:
# - x86_64-unknown-linux-gnu
# - aarch64-unknown-linux-gnu
# - x86_64-apple-darwin
# - aarch64-apple-darwin
jobs:
  # Build the static libraries for each target architecture and upload 
  # them as artifacts to collect and attach in the next job.
  build-firewood-ffi-libs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: Swatinem/rust-cache@v2

      - name: Build for ${{ matrix.target }}
        run: cargo build --profile maxperf --features ethhash,logger --target ${{ matrix.target }} -p firewood-ffi
        
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/maxperf/libfirewood_ffi.a
          if-no-files-found: error

  # Collect all the static libraries built on the previous matrix of jobs
  # and add them into ffi/libs directory.
  # We commit and push this as a new branch with "--force" to overwrite
  # the previous static libs that will not be on our branch.
  push-firewood-ffi-libs:
    needs: build-firewood-ffi-libs
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.determine_branch.outputs.target_branch }}
    steps:
      - name: Determine branch name
        id: determine_branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.create_branch_name }}" ]]; then
            export target_branch="${{ github.event.inputs.create_branch_name }}"
            echo "Using workflow input as target branch: $target_branch"
            echo "target_branch=$target_branch" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            export target_branch="${GITHUB_REF#refs/tags/}"
            echo "Using tag name as target_branch: $target_branch"
            echo "target_branch=$target_branch" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            export target_branch="${{ github.event.pull_request.head.ref }}"
            echo "Using PR head name as target branch: $target_branch"
            echo "target_branch=$target_branch" >> "$GITHUB_OUTPUT"
          else
            echo "No valid input or tag found."
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          path: firewood

      - uses: actions/checkout@v4
        with:
          repository: ava-labs/firewood-go
          token: ${{ secrets.FIREWOOD_GO_GITHUB_TOKEN }}
          path: firewood-go

      - name: Copy FFI Source Code
        run: cp -r firewood/ffi firewood-go

      - name: Download binaries into libs directory
        uses: actions/download-artifact@v4
        with:
          path: firewood-go/ffi/libs

      - name: List downloaded target directory
        run: find firewood-go -type f | sort

      - name: Push static libs to branch
        working-directory: firewood-go
        # GITHUB_TOKEN is configured in the last actions/checkout step
        # to have read/write permissions to the firewood-go repo.
        run: |
          git config --global user.name "FirewoodCI"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ steps.determine_branch.outputs.target_branch }}
          git add .
          git commit -m "firewood ci ${{ github.sha }}: attach firewood static libs"
          
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            git tag -a "${GITHUB_REF#refs/tags/}" -m "firewood ci ${{ github.sha }}: attach firewood static libs"
            git push origin "refs/tags/${GITHUB_REF#refs/tags/}"
          else
            git push -u origin ${{ steps.determine_branch.outputs.target_branch }} --force
          fi

  # Check out the branch created in the previous job on a matrix of
  # our target architectures and test the FFI package on a fresh
  # machine without re-compiling Firewood locally.
  # This tests that the Firewood FFI package passes tests on the target
  # architecture when it is forced to depend on the attached static libs.
  test-firewood-ffi-libs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04-arm, macos-latest, macos-13]
    needs: push-firewood-ffi-libs
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ava-labs/firewood-go
          token: ${{ secrets.FIREWOOD_GO_GITHUB_TOKEN }}
          ref: ${{ needs.push-firewood-ffi-libs.outputs.target_branch }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "ffi/go.mod"
          cache-dependency-path: "ffi/go.sum"
      - name: Test Go FFI bindings
        working-directory: ffi
        # cgocheck2 is expensive but provides complete pointer checks
        run: GOEXPERIMENT=cgocheck2 TEST_FIREWOOD_HASH_MODE=ethhash go test ./...

  remove-if-pr-only:
    runs-on: ubuntu-latest
    needs: [push-firewood-ffi-libs, test-firewood-ffi-libs]
    if: needs.push-firewood-ffi-libs.result == 'success' && github.event_name == 'pull_request'
    permissions:
      # Give the GITHUB_TOKEN write permission to delete the
      # branch created by the previous job if it is a pull request.
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ava-labs/firewood-go
          token: ${{ secrets.FIREWOOD_GO_GITHUB_TOKEN }}
          ref: ${{ needs.push-firewood-ffi-libs.outputs.target_branch }}
      - name: Delete branch
        run: |
          git push origin --delete ${{ needs.push-firewood-ffi-libs.outputs.target_branch }}
