name: 'Setup Firewood'
description: 'Sets up Firewood FFI from pre-built binaries or builds from source'

inputs:
  version:
    description: 'Firewood version. Format: ffi/vX.Y.Z for pre-built FFI, commit/branch for source build'
    required: true
  workspace-path:
    description: 'Custom workspace path (default: ./firewood-workspace)'
    required: false
    default: ''
  target:
    description: 'Target platform for build (auto-detected if not specified)'
    required: false
    default: ''
  features:
    description: 'Cargo features to enable for source builds'
    required: false
    default: 'ethhash,logger'
  profile:
    description: 'Cargo build profile for source builds'
    required: false
    default: 'maxperf'
  rust-version:
    description: 'Rust version for source builds'
    required: false
    default: '1.89'

outputs:
  ffi-path:
    description: 'Absolute path to Firewood FFI directory'
    value: ${{ steps.build.outputs.ffi-path }}
  target-platform:
    description: 'Target platform used for build'
    value: ${{ steps.build.outputs.target-platform }}

runs:
  using: 'composite'
  steps:
    - name: Install Rust toolchain for source build
      if: ${{ !startsWith(inputs.version, 'ffi/') }}
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ inputs.rust-version }}

    - name: Setup Rust cache
      if: ${{ !startsWith(inputs.version, 'ffi/') }}
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ inputs.profile }}-${{ inputs.features }}

    - name: Install build dependencies
      if: ${{ !startsWith(inputs.version, 'ffi/') }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Build Firewood FFI
      id: build
      shell: bash
      run: |
        # Build script arguments
        ARGS="${{ inputs.version }}"
        
        if [ -n "${{ inputs.workspace-path }}" ]; then
          ARGS="$ARGS --workspace ${{ inputs.workspace-path }}"
        fi
        
        if [ -n "${{ inputs.target }}" ]; then
          ARGS="$ARGS --target ${{ inputs.target }}"
        fi
        
        if [ -n "${{ inputs.features }}" ]; then
          ARGS="$ARGS --features ${{ inputs.features }}"
        fi
        
        if [ -n "${{ inputs.profile }}" ]; then
          ARGS="$ARGS --profile ${{ inputs.profile }}"
        fi
        
        # Run build script and capture FFI path
        FFI_PATH=$(./benchmark/setup-scripts/build-firewood.sh $ARGS)
        
        # Set outputs
        echo "ffi-path=$FFI_PATH" >> $GITHUB_OUTPUT

        # Extract target platform from FFI path structure
        TARGET_PLATFORM=$(basename $(dirname $(find "$FFI_PATH/libs" -name "libfirewood_ffi.a" | head -1)))
        echo "target-platform=$TARGET_PLATFORM" >> $GITHUB_OUTPUT
        
        # Set environment variable for other actions
        echo "FIREWOOD_FFI_PATH=$FFI_PATH" >> $GITHUB_ENV
        
        echo "Firewood FFI ready at: $FFI_PATH"
